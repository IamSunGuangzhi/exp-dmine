package ed.inf.discovery;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import ed.inf.discovery.auxiliary.SimpleEdge;
import ed.inf.discovery.auxiliary.SimpleNode;
import ed.inf.grape.graph.Partition;
import ed.inf.grape.util.Dev;
import ed.inf.grape.util.KV;

public class DiscoveryTask {

	private int partitionID;

	/** step count */
	private int superstep;

	/** messages generated by this step */
	private List<UpMessage> generatedMessages;

	private Map<SimpleEdge, Integer> freqEdge;

	static Logger log = LogManager.getLogger(DiscoveryTask.class);

	public DiscoveryTask(int partitionID) {
		this.partitionID = partitionID;
		this.generatedMessages = new LinkedList<UpMessage>();
	}

	public int getPartitionID() {
		return partitionID;
	}

	public void startStep(Partition partition) {

		long start = System.currentTimeMillis();

		Pattern initPattern = new Pattern(this.partitionID);

		initPattern.initialXYEdge(KV.QUERY_X_LABEL, KV.QUERY_Y_LABEL);

		partition.initWithPattern(initPattern);

		log.debug("init count using " + (System.currentTimeMillis() - start)
				+ "ms.");

		log.debug(partition.getCountInfo());
		log.debug(Dev.currentRuntimeState());

		List<Pattern> expandedPatterns = this.expand(partition, initPattern);
		log.debug("expanded " + expandedPatterns.size() + " patterns.");
		// TODO: automorphism check of the expendedPatterns.

		start = System.currentTimeMillis();
		for (Pattern p : expandedPatterns) {
			int matchRCount = partition.matchR(p);
			if (matchRCount == 0) {
				continue;
			}
			UpMessage message = new UpMessage(p, matchRCount, this.partitionID);
			generatedMessages.add(message);
		}
		log.debug("compute confidence using "
				+ (System.currentTimeMillis() - start) + "ms.");
		log.debug(Dev.currentRuntimeState());

	}

	public void continuesStep(Partition partition, List<DownMessage> messages) {

	}

	private List<Pattern> expand(Partition partition, Pattern origin) {

		// FIXME

		List<Pattern> expandedPattern = new ArrayList<Pattern>();

		int radiu = this.superstep;
		log.info("expand on radiu r = " + superstep);

		// ArrayList<SimpleNode> NodesOnRadiuR = new ArrayList<SimpleNode>();

		for (SimpleNode n : origin.getQ().vertexSet()) {

			if (n.hop == radiu) {

				// only expand on radius R

				if (n.attribute == KV.PERSON_LABEL) {

					// node n is a person, expand with frequent edges.
					for (SimpleEdge edge : partition.getFreqEdge().keySet()) {

						if (edge.fnode == KV.PERSON_LABEL) {

							Pattern newPattern = new Pattern(this.partitionID,
									origin);
							newPattern.expend1Node1EdgeAsChildFromFixedNode(
									n.nodeID, edge.tnode);

							expandedPattern.add(newPattern);
						}
					}
				}

				else {
					// node n is an attribute node
					Pattern newPattern = new Pattern(this.partitionID, origin);
					newPattern.expend1Node1EdgeAsParentFromFixedNode(n.nodeID,
							KV.PERSON_LABEL);

					expandedPattern.add(newPattern);
				}
			}
		}

		return expandedPattern;

	}

	public void prepareForNextCompute() {
		// TODO: reset messages
	}

	public List<UpMessage> getMessages() {
		return this.generatedMessages;
	}
}
